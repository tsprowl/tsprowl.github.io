/*
game.js for Perlenspiel 3.3.x
Last revision: 2018-10-14 (BM)
*/

// The global GAME variable creates a namespace
// for game-specific code and variables

// It is initialized with an immediately-invoked
// function call (described below)

var GAME = ( function () {
	// By convention, constants are all upper-case

	var WIDTH = 32; // width of grid
	var HEIGHT = 32; // height of grid

	var COLOR_PLAYER = 0x00FF11; // grabber color
	var COLOR_FLOOR = 0x6D6D6D; // floor color
	var COLOR_WALL = 0x000000; // wall color
	var COLOR_CRATE = 0x633200; // crate color
	var COLOR_GOAL = 0x9C9C9C; // color of the goal
	var COLOR_PURPLE_GOAL = 0xDB00DB;
	var COLOR_PURPLE_CRATE = 0x8A038A
	var COLOR_YELLOW_GOAL = 0xDEED09;
	var COLOR_YELLOW_CRATE = 0xB8B800;
	var COLOR_BLUE_GOAL = 0x2323A3;
	var COLOR_BLUE_CRATE = 0x12125E;
	var isBeat = 0;
	var COLOR_RED_BOX = 0xFF0000;
	var COLOR_ORANGE_BOX = 0xFF7F00;
	var COLOR_YELLOW_BOX = 0xFFD700;
	var COLOR_GREEN_BOX = 0x4DBD33;
	var COLOR_BLUE_BOX = 0x0000FF;
	var COLOR_INDIGO_BOX = 0x4B0082;
	var COLOR_VIOLET_BOX = 0x9400D3;
	var COLOR_WHITE_BOX = 0xFFFFFF;
	var COLOR_RED_TILE = 0xB20000;
	var COLOR_ORANGE_TILE = 0xB25800;
	var COLOR_YELLOW_TILE = 0xB29600;
	var COLOR_GREEN_TILE = 0x358423;
	var COLOR_BLUE_TILE = 0x0000B2;
	var COLOR_INDIGO_TILE = 0x34005B;
	var COLOR_VIOLET_TILE = 0x670093;
	var COLOR_WHITE_TILE = 0xB2B2B2;
	var colorCounter = 0;
	var isHard = 0;

	// Marks the player character's upper left corner and sets its position

	var playerUpper_x = 5; // current x-pos of grabber
	var playerUpper_y = 5; // current y-pos of grabber

	var levelCount = 1;

	var start = [
		0,  0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0,
		0, 18, 18, 0, 0, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 22, 22, 0,
		0, 18, 18, 0, 0, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 22, 22, 0,
		0,  1,  1, 0, 0, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  1,  1, 0,
		0,  1,  1, 0, 0, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  1,  1, 0,
		0,  1,  1, 0, 0, 1, 1, 1, 1, 10, 10, 1, 1, 1, 1, 1, 1, 14, 14, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  1,  1, 0,
		0,  1,  1, 0, 0, 1, 1, 1, 1, 10, 10, 1, 1, 1, 1, 1, 1, 14, 14, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  1,  1, 0,
		0,  1,  1, 0, 0, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  1,  1, 0,
		0,  1,  1, 0, 0, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  1,  1, 0,
		0,  1,  1, 0, 0, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  1,  1, 0,
		0,  1,  1, 0, 0, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  1,  1, 0,
		0,  1,  1, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 1, 1, 1, 1,  1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  1, 0,
		0,  1,  1, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 1, 1, 1, 1,  1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  1, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  1, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  1, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  1, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  1, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  1, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  1, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  1, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  1, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  1, 0,
		0,  0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,  0,  0, 0,
		0,  0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,  0,  0, 0,
		0,  1,  1, 1, 1, 1, 0, 0, 1,  1,  1, 1, 1, 1, 0, 0, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  0,  0, 0,
		0,  1,  1, 1, 1, 1, 0, 0, 1,  1,  1, 1, 1, 1, 0, 0, 1,  1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,  0,  0, 0,
		0,  1,  1, 1, 1, 1, 0, 0, 1,  1,  0, 0, 1, 1, 0, 0, 1,  1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  0, 0, 1, 1, 0, 0, 1,  1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0,
		0,  1,  1, 1, 1, 1, 1, 1, 1,  1,  0, 0, 1, 1, 0, 0, 1,  1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0,
		0,  1,  1, 1, 1, 1, 0, 0, 1,  1,  0, 0, 1, 1, 1, 1, 1,  1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0,
		0,  1,  1, 1, 1, 1, 0, 0, 1,  1,  0, 0, 1, 1, 1, 1, 1,  1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0,
		0,  0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0
	]

	var easy1 = [
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 1, 0,
		0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	];

	var easy2 = [
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0,
		0, 1, 1, 1, 1, 1, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
		0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
		0, 3, 3, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3, 0, 1, 1, 1, 1, 0, 0, 0,
		0, 3, 3, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 0, 1, 1, 1, 1, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
		0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0,
		0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 3, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	];

	var easy3 = [
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 3, 3, 1, 0, 0, 1, 3, 3, 1, 0, 0, 1, 1, 3, 3, 0, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 3, 3, 1, 0, 0, 1, 3, 3, 1, 0, 0, 1, 1, 3, 3, 0, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 1, 1, 0, 0, 3, 3, 0, 0, 0, 0,
		0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 1, 1, 0, 0, 3, 3, 0, 0, 0, 0,
		0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0,
		0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	];

	var easy4 = [
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 0, 0, 0,
		0, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 0, 0, 6, 6, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 6, 6, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 8, 8, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 8, 8, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 6, 6, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 6, 6, 1, 1, 1, 1, 0,
		0, 1, 1, 5, 5, 1, 1, 1, 1, 1, 1, 0, 0, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0,
		0, 1, 1, 5, 5, 1, 1, 1, 1, 1, 1, 0, 0, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 4, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 4, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 9, 9, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 9, 9, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 5, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0,
		0, 1, 1, 8, 8, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 5, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0,
		0, 1, 1, 8, 8, 0, 0, 0, 1, 1, 1, 1, 1, 8, 8, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 8, 8, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 5, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 5, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 4, 4, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 4, 4, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	];

	var hard1 = [
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0,
		0, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 1, 1, 1, 1, 3, 3, 0, 0, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 1, 1, 1, 1, 3, 3, 0, 0, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	];

	var hard2 = [
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 8, 8, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 8, 8, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 0, 0, 0, 0, 1, 1, 9, 9, 1, 1, 1, 5, 5, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 0, 0, 0, 0, 1, 1, 9, 9, 1, 1, 1, 5, 5, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 1, 1, 0, 0, 5, 5, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 0, 0, 1, 1, 0, 0, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 4, 4, 0,
		0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 9, 9, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 4, 4, 0,
		0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 9, 9, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
		0, 8, 8, 0, 0, 6, 6, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
		0, 8, 8, 0, 0, 6, 6, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6, 6, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		0, 6, 6, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 5, 5, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0, 0, 1, 8, 8, 0, 0, 4, 4, 0,
		0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 8, 8, 0, 0, 4, 4, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	];

	var hard3 = [
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 4, 0,
		0, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 4, 0,
		0, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 7, 7, 0, 0, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 7, 7, 0, 0, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 9, 9, 1, 1, 1, 1, 1, 1, 0, 0, 0, 5, 5, 0, 0, 8, 8, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 9, 9, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 8, 8, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 6, 6, 0, 0, 4, 4, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 8, 8, 0, 0, 0, 0, 5, 5, 1, 1, 1, 1, 9, 9, 0, 0, 0, 6, 6, 0, 0, 4, 4, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 1, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 0, 0, 1, 1, 7, 7, 0, 0, 5, 5, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 0, 0, 1, 1, 7, 7, 0, 0, 5, 5, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
		0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
		0, 1, 1, 6, 6, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 8, 8, 1, 1, 1, 1, 1, 0, 0, 0, 0,
		0, 1, 1, 6, 6, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 8, 8, 1, 1, 1, 1, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	];

	var hard4 = [
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 6, 6, 0, 0, 0, 6, 6, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 6, 6, 0, 0, 0, 6, 6, 0,
		0, 1, 1, 9, 9, 1, 1, 1, 7, 7, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,
		0, 1, 1, 9, 9, 1, 1, 1, 7, 7, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 7, 7, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,
		0, 1, 1, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0, 0, 7, 7, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,
		0, 1, 1, 5, 5, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 4, 4, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 4, 4, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 0, 0, 0, 0, 6, 6, 0, 0, 1, 1, 0,
		0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 6, 6, 0, 0, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,
		0, 1, 1, 7, 7, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 7, 7, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 0,
		0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	];

	var hard5 = [
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 23, 23, 0, 1, 1, 1, 1, 1, 0,
		0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 23, 23, 0, 17, 17, 1, 1, 1, 0,
		0, 1, 1, 11, 11, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 17, 17, 1, 1, 1, 0,
		0, 1, 1, 11, 11, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,
		0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 14, 14, 1, 15, 15, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 16, 16, 0,
		0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 14, 14, 1, 15, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 16, 0,
		      0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		       0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0,
		  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 22, 22, 0, 0, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 13, 13, 1, 0, 0, 0, 22, 22, 0, 0, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 13, 13, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,
		  0, 0, 0, 1, 19, 19, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 25, 25, 0, 0, 24, 24, 0,
		  0, 0, 0, 1, 19, 19, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 25, 25, 0, 0, 24, 24, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21, 21, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21, 21, 0,
		0, 1, 1, 1, 1, 1, 0, 0, 18, 18, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 0, 0, 18, 18, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 10, 10, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 10, 10, 0, 0, 0, 0, 0, 1, 1, 1, 12, 12, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0,
		  0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 12, 12, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0,
		  0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 0,
		  0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	];

	var draw_map = function (level) {
		var x, y, data;

		for (y = 0; y < HEIGHT; y += 1) {
			for (x = 0; x < WIDTH; x += 1) {
				data = level [(y * WIDTH) + x];
				if (data == 0) {
					PS.color(x, y, COLOR_WALL);
				}
				if (data == 1){
					PS.color(x, y, COLOR_FLOOR);
					}
				if (data == 2) {
					PS.color(x, y, COLOR_CRATE);
				}
				if (data == 3) {
					PS.color(x, y, COLOR_GOAL);
				}
				if (data == 4){
					PS.color(x, y, COLOR_PURPLE_GOAL);
				}
				if (data == 5){
					PS.color(x, y, COLOR_PURPLE_CRATE);
				}
				if (data == 6){
					PS.color(x, y, COLOR_YELLOW_GOAL);
				}
				if (data == 7){
					PS.color(x, y, COLOR_YELLOW_CRATE);
				}
				if (data == 8){
					PS.color(x, y, COLOR_BLUE_GOAL);
				}
				if (data == 9){
					PS.color(x, y, COLOR_BLUE_CRATE);
				}
				if (data == 10){
					PS.color(x, y, COLOR_RED_BOX);
				}
				if (data == 11){
					PS.color(x, y, COLOR_ORANGE_BOX);
				}
				if (data == 12){
					PS.color(x, y, COLOR_YELLOW_BOX);
					}
				if (data == 13){
					PS.color(x, y, COLOR_GREEN_BOX);
				}
				if (data == 14){
					PS.color(x, y, COLOR_BLUE_BOX);
				}
				if (data == 15){
					PS.color(x, y, COLOR_INDIGO_BOX);
				}
				if (data == 16){
					PS.color(x, y, COLOR_VIOLET_BOX);
				}
				if (data == 17){
					PS.color(x, y, COLOR_WHITE_BOX);
				}
				if (data == 18){
					PS.color(x, y, COLOR_RED_TILE);
				}
				if (data == 19){
					PS.color(x, y, COLOR_ORANGE_TILE);
				}
				if (data == 20){
					PS.color(x, y, COLOR_YELLOW_TILE);
				}
				if (data == 21){
					PS.color(x, y, COLOR_GREEN_TILE);
				}
				if (data == 22){
					PS.color(x, y, COLOR_BLUE_TILE);
				}
				if (data == 23){
					PS.color(x, y, COLOR_INDIGO_TILE);
				}
				if (data == 24){
					PS.color(x, y, COLOR_VIOLET_TILE);
				}
				if (data == 25){
					PS.color(x, y, COLOR_WHITE_TILE);
				}
			}
		}
	};


	// The 'exports' object is used to define
	// variables and/or functions that need to be
	// accessible outside this function.
	// So far, it contains only one property,
	// an 'init' function with no parameters.

	var exports = {

		// GAME.init()
		// Initializes the game

		initStart: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Push the crates. Red for easy, blue for hard");
			PS.statusColor(PS.COLOR_WHITE);
			selectDifficulty = PS.timerStart(PS.DEFAULT, GAME.selectDifficulty);
			GAME.isBeat = 0;
			playerUpper_x = 2;
			playerUpper_y = 26;
			GAME.levelCount = 0;


			draw_map(start);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
		},

		initEasy1: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Push the crates. Press Space to reset");
			PS.statusColor(PS.COLOR_WHITE);
			beatEasy1 = PS.timerStart(PS.DEFAULT, GAME.winEasy1);
			GAME.isBeat = 0;
			playerUpper_x = 5;
			playerUpper_y = 5;
			GAME.levelCount = 1;


			draw_map(easy1);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);

			PS.timerStop(selectDifficulty);
		},

		initEasy2: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Push the crates. Press Space to reset");
			PS.statusColor(PS.COLOR_WHITE);
			beatEasy2 = PS.timerStart(PS.DEFAULT, GAME.winEasy2);
			GAME.isBeat = 0;
			playerUpper_x = 14;
			playerUpper_y = 15;
			GAME.levelCount = 2;


			draw_map(easy2);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);

			PS.timerStop(beatEasy1);
		},

		initEasy3: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Push the crates. Press Space to reset");
			PS.statusColor(PS.COLOR_WHITE);
			beatEasy3 = PS.timerStart(PS.DEFAULT, GAME.winEasy3);
			GAME.isBeat = 0;
			playerUpper_x = 6;
			playerUpper_y = 16;
			GAME.levelCount = 3;


			draw_map(easy3);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);

			PS.timerStop(beatEasy2);
		},

		initEasy4: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Match the colors!");
			PS.statusColor(PS.COLOR_WHITE);
			beatEasy4 = PS.timerStart(PS.DEFAULT, GAME.winEasy4);
			GAME.isBeat = 0;
			playerUpper_x = 1;
			playerUpper_y = 17;
			GAME.levelCount = 4;


			draw_map(easy4);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);

			PS.timerStop(beatEasy3);
		},

		initHard1: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Push the crates. Press Space to reset");
			PS.statusColor(PS.COLOR_WHITE);
			beatHard1 = PS.timerStart(PS.DEFAULT, GAME.winHard1);
			GAME.isBeat = 0;
			playerUpper_x = 5;
			playerUpper_y = 5;
			GAME.levelCount = 5;


			draw_map(hard1);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);

			PS.timerStop(selectDifficulty);
		},

		initHard2: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Match the colors!");
			PS.statusColor(PS.COLOR_WHITE);
			beatHard2 = PS.timerStart(PS.DEFAULT, GAME.winHard2);
			GAME.isBeat = 0;
			playerUpper_x = 15;
			playerUpper_y = 15;
			GAME.levelCount = 6;


			draw_map(hard2);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);

			PS.timerStop(beatHard1);
		},

		initHard3: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Match the colors!");
			PS.statusColor(PS.COLOR_WHITE);
			beatHard3 = PS.timerStart(PS.DEFAULT, GAME.winHard3);
			GAME.isBeat = 0;
			playerUpper_x = 11;
			playerUpper_y = 15;
			GAME.levelCount = 7;


			draw_map(hard3);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);

			PS.timerStop(beatHard2);
		},

		initHard4: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Match the colors!");
			PS.statusColor(PS.COLOR_WHITE);
			beatHard4 = PS.timerStart(PS.DEFAULT, GAME.winHard4);
			GAME.isBeat = 0;
			playerUpper_x = 9;
			playerUpper_y = 13;
			GAME.levelCount = 3;


			draw_map(hard4);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
			GAME.isBeat = 0;
			GAME.levelCount = 3;

			PS.timerStop(beatHard3);
		},

		initHard5: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Richard Of York Gave Battle In Vain, and Won");
			PS.statusColor(PS.COLOR_WHITE);
			beatHard5 = PS.timerStart(PS.DEFAULT, GAME.colorCount);
			GAME.isBeat = 0;
			playerUpper_x = 12;
			playerUpper_y = 14;
			GAME.colorCounter = 1;
			GAME.levelCount = 4;

			draw_map(hard5);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);

			PS.timerStop(beatHard4);
		},

		restartEasy1: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Push the crates. Press Space to reset");
			PS.statusColor(PS.COLOR_WHITE);

			playerUpper_x = 5;
			playerUpper_y = 5;


			draw_map(easy1);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
			GAME.isBeat = 0;
		},

		restartEasy2: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Push the crates. Press Space to reset");
			PS.statusColor(PS.COLOR_WHITE);
			GAME.isBeat = 0;
			playerUpper_x = 14;
			playerUpper_y = 15;
			GAME.levelCount = 2;


			draw_map(easy2);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
			},

		restartEasy3: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Push the crates. Press Space to reset");
			PS.statusColor(PS.COLOR_WHITE);
			GAME.isBeat = 0;
			playerUpper_x = 6;
			playerUpper_y = 16;
			GAME.levelCount = 3;


			draw_map(easy3);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
		},

		restartEasy4: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Match the colors!");
			PS.statusColor(PS.COLOR_WHITE);
			GAME.isBeat = 0;
			playerUpper_x = 1;
			playerUpper_y = 17;
			GAME.levelCount = 4;


			draw_map(easy4);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
		},

		restartHard1: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Push the crates. Press Space to reset");
			PS.statusColor(PS.COLOR_WHITE);
			GAME.isBeat = 0;
			playerUpper_x = 5;
			playerUpper_y = 5;


			draw_map(hard1);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
		},

		restartHard2: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Match the colors!");
			PS.statusColor(PS.COLOR_WHITE);
			GAME.isBeat = 0;
			playerUpper_x = 15;
			playerUpper_y = 15;


			draw_map(hard2);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
		},

		restartHard3: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Match the colors!");
			PS.statusColor(PS.COLOR_WHITE);
			GAME.isBeat = 0;
			playerUpper_x = 11;
			playerUpper_y = 15;


			draw_map(hard3);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
		},

		restartHard4: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Match the colors!");
			PS.statusColor(PS.COLOR_WHITE);

			playerUpper_x = 9;
			playerUpper_y = 13;


			draw_map(hard4);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
			GAME.isBeat = 0;
		},

		restartHard5: function () {
			PS.gridSize(WIDTH, HEIGHT); // init grid
			PS.color(PS.ALL, PS.ALL, COLOR_FLOOR);
			PS.border(PS.ALL, PS.ALL, 0); // no borders
			PS.gridColor(0x000000);
			PS.statusText("Richard Of York Gave Battle In Vain, and Won");
			PS.statusColor(PS.COLOR_WHITE);
			GAME.isBeat = 0;
			playerUpper_x = 12;
			playerUpper_y = 14;
			GAME.colorCounter = 1;

			draw_map(hard5);

			// Place grabber at initial position

			PS.color(playerUpper_x, playerUpper_y, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_PLAYER);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_PLAYER);
		},

		move: function (h, v) {
			var nx, ny;

			// Calculate proposed new location.

			nx = playerUpper_x + h;
			ny = playerUpper_y + v;

			// Is there a wall in the proposed location?
			// If the bead there is COLOR_WALL (black),
			// exit without moving.

			if (PS.color(nx, ny) == COLOR_WALL) {
				return;
			}
			if (PS.color(nx + 1, ny) == COLOR_WALL) {
				return;
			}
			if (PS.color(nx, ny + 1) == COLOR_WALL) {
				return;
			}
			if (PS.color(nx + 1, ny + 1) == COLOR_WALL) {
				return;
			}


			// Handles the actual movement

			if ((PS.color(nx, ny) == COLOR_CRATE) && (PS.color(nx, ny + 1) == COLOR_CRATE)) { // if the top left and bottom left corners are the crate
				if ((PS.color(nx - 2, ny) == COLOR_WALL) || (PS.color(nx - 2, ny + 1) == COLOR_WALL)) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else if ((PS.color(nx - 2, ny) == COLOR_CRATE) || (PS.color(nx - 2, ny + 1) == COLOR_CRATE)) {
					return;
				} else {
					PS.color(nx - 2, ny, COLOR_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_CRATE);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_CRATE)) { // if the top left and bottm left are not the craate, check bottom left and bottm right
				if ((PS.color(nx, ny + 3) == COLOR_WALL) || (PS.color(nx + 1, ny + 3) == COLOR_WALL)) { //if so, check for wall
					return; // don't move
				} else if ((PS.color(nx, ny + 3) == COLOR_CRATE) || (PS.color(nx + 1, ny + 3) == COLOR_CRATE)) { //if so, check for wall
					return; // don't move
				} else {
					PS.color(nx, ny + 3, COLOR_CRATE); // otherwise, move
					PS.color(nx + 1, ny + 3, COLOR_CRATE);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_CRATE)) { // if not either of the above, check top right and bottom right
				if ((PS.color(nx + 3, ny) == COLOR_WALL) || (PS.color(nx + 3, ny + 1) == COLOR_WALL)) { // if so, check for wall
					return; // stop
				} else if ((PS.color(nx + 3, ny) == COLOR_CRATE) || (PS.color(nx + 3, ny + 1) == COLOR_CRATE)) { // if so, check for wall
					return; // stop
				} else {
					PS.color(nx + 3, ny, COLOR_CRATE); // otherwise, move
					PS.color(nx + 3, ny + 1, COLOR_CRATE);
				}
			} else if ((PS.color(nx, ny) == COLOR_CRATE) && (PS.color(nx + 1, ny) == COLOR_CRATE)) { // if none of the above, check top left and top right
				if ((PS.color(nx, ny - 2) == COLOR_WALL) || (PS.color(nx + 1, ny - 2) == COLOR_WALL)) { // check for wall
					return; // stop
				} else {
					PS.color(nx, ny - 2, COLOR_CRATE); // otherwise, move
					PS.color(nx + 1, ny - 2, COLOR_CRATE);
				}
			} else if (((PS.color(nx, ny) == COLOR_CRATE) && (PS.color(nx, ny + 1) != COLOR_CRATE)) || (((PS.color(nx, ny) != COLOR_CRATE) && PS.color(nx, ny + 1) == COLOR_CRATE))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_CRATE) && (PS.color(nx + 1, ny + 1) != COLOR_CRATE)) || ((PS.color(nx, ny + 1) != COLOR_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_CRATE))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_CRATE) && (PS.color(nx + 1, ny + 1) != COLOR_CRATE)) || ((PS.color(nx + 1, ny) != COLOR_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_CRATE))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_CRATE) && (PS.color(nx + 1, ny) != COLOR_CRATE)) || ((PS.color(nx, ny) != COLOR_CRATE) && (PS.color(nx, ny + 1) == COLOR_CRATE))) {
				return;
			}

			if ((PS.color(nx, ny) == COLOR_PURPLE_CRATE) && (PS.color(nx, ny + 1) == COLOR_PURPLE_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_PURPLE_GOAL) && (PS.color(nx - 2, ny) != COLOR_FLOOR)) || ((PS.color(nx - 2, ny + 1) != COLOR_PURPLE_GOAL) && (PS.color(nx - 2, ny + 1) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx - 2, ny, COLOR_PURPLE_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_PURPLE_CRATE);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_PURPLE_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_PURPLE_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx, ny + 3) != COLOR_PURPLE_GOAL) && (PS.color(nx, ny + 3) != COLOR_FLOOR)) || ((PS.color(nx + 1, ny + 3) != COLOR_PURPLE_GOAL) && (PS.color(nx + 1, ny + 3) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx, ny + 3, COLOR_PURPLE_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx + 1, ny + 3, COLOR_PURPLE_CRATE);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_PURPLE_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_PURPLE_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx + 3, ny) != COLOR_PURPLE_GOAL) && (PS.color(nx + 3, ny) != COLOR_FLOOR)) || ((PS.color(nx + 3, ny + 1) != COLOR_PURPLE_GOAL) && (PS.color(nx + 3, ny + 1) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx + 3, ny, COLOR_PURPLE_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx + 3, ny + 1, COLOR_PURPLE_CRATE);
				}
			} else if ((PS.color(nx, ny) == COLOR_PURPLE_CRATE) && (PS.color(nx + 1, ny) == COLOR_PURPLE_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx, ny - 2) != COLOR_PURPLE_GOAL) && (PS.color(nx, ny - 2) != COLOR_FLOOR)) || ((PS.color(nx + 1, ny - 2) != COLOR_PURPLE_GOAL) && (PS.color(nx + 1, ny - 2) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx, ny - 2, COLOR_PURPLE_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx + 1, ny - 2, COLOR_PURPLE_CRATE);
				}
			} else if (((PS.color(nx, ny) == COLOR_PURPLE_CRATE) && (PS.color(nx, ny + 1) != COLOR_PURPLE_CRATE)) || (((PS.color(nx, ny) != COLOR_PURPLE_CRATE) && PS.color(nx, ny + 1) == COLOR_PURPLE_CRATE))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_PURPLE_CRATE) && (PS.color(nx + 1, ny + 1) != COLOR_PURPLE_CRATE)) || ((PS.color(nx, ny + 1) != COLOR_PURPLE_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_PURPLE_CRATE))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_PURPLE_CRATE) && (PS.color(nx + 1, ny + 1) != COLOR_PURPLE_CRATE)) || ((PS.color(nx + 1, ny) != COLOR_PURPLE_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_PURPLE_CRATE))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_PURPLE_CRATE) && (PS.color(nx + 1, ny) != COLOR_PURPLE_CRATE)) || ((PS.color(nx, ny) != COLOR_PURPLE_CRATE) && (PS.color(nx, ny + 1) == COLOR_PURPLE_CRATE))) {
				return;
			}

			if ((PS.color(nx, ny) == COLOR_YELLOW_CRATE) && (PS.color(nx, ny + 1) == COLOR_YELLOW_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_YELLOW_GOAL) && (PS.color(nx - 2, ny) != COLOR_FLOOR)) || ((PS.color(nx - 2, ny + 1) != COLOR_YELLOW_GOAL) && (PS.color(nx - 2, ny + 1) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx - 2, ny, COLOR_YELLOW_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_YELLOW_CRATE);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_YELLOW_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_YELLOW_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx, ny + 3) != COLOR_YELLOW_GOAL) && (PS.color(nx, ny + 3) != COLOR_FLOOR)) || ((PS.color(nx + 1, ny + 3) != COLOR_YELLOW_GOAL) && (PS.color(nx + 1, ny + 3) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx, ny + 3, COLOR_YELLOW_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx + 1, ny + 3, COLOR_YELLOW_CRATE);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_YELLOW_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_YELLOW_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx + 3, ny) != COLOR_YELLOW_GOAL) && (PS.color(nx + 3, ny) != COLOR_FLOOR)) || ((PS.color(nx + 3, ny + 1) != COLOR_YELLOW_GOAL) && (PS.color(nx + 3, ny + 1) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx + 3, ny, COLOR_YELLOW_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx + 3, ny + 1, COLOR_YELLOW_CRATE);
				}
			} else if ((PS.color(nx, ny) == COLOR_YELLOW_CRATE) && (PS.color(nx + 1, ny) == COLOR_YELLOW_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx, ny - 2) != COLOR_YELLOW_GOAL) && (PS.color(nx, ny - 2) != COLOR_FLOOR)) || ((PS.color(nx + 1, ny - 2) != COLOR_YELLOW_GOAL) && (PS.color(nx + 1, ny - 2) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx, ny - 2, COLOR_YELLOW_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx + 1, ny - 2, COLOR_YELLOW_CRATE);
				}
			} else if (((PS.color(nx, ny) == COLOR_YELLOW_CRATE) && (PS.color(nx, ny + 1) != COLOR_YELLOW_CRATE)) || (((PS.color(nx, ny) != COLOR_YELLOW_CRATE) && PS.color(nx, ny + 1) == COLOR_YELLOW_CRATE))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_YELLOW_CRATE) && (PS.color(nx + 1, ny + 1) != COLOR_YELLOW_CRATE)) || ((PS.color(nx, ny + 1) != COLOR_YELLOW_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_YELLOW_CRATE))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_YELLOW_CRATE) && (PS.color(nx + 1, ny + 1) != COLOR_YELLOW_CRATE)) || ((PS.color(nx + 1, ny) != COLOR_YELLOW_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_YELLOW_CRATE))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_YELLOW_CRATE) && (PS.color(nx + 1, ny) != COLOR_YELLOW_CRATE)) || ((PS.color(nx, ny) != COLOR_YELLOW_CRATE) && (PS.color(nx, ny + 1) == COLOR_YELLOW_CRATE))) {
				return;
			}

			if ((PS.color(nx, ny) == COLOR_BLUE_CRATE) && (PS.color(nx, ny + 1) == COLOR_BLUE_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_BLUE_GOAL) && (PS.color(nx - 2, ny) != COLOR_FLOOR)) || ((PS.color(nx - 2, ny + 1) != COLOR_BLUE_GOAL) && (PS.color(nx - 2, ny + 1) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx - 2, ny, COLOR_BLUE_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_BLUE_CRATE);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_BLUE_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_BLUE_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx, ny + 3) != COLOR_BLUE_GOAL) && (PS.color(nx, ny + 3) != COLOR_FLOOR)) || ((PS.color(nx + 1, ny + 3) != COLOR_BLUE_GOAL) && (PS.color(nx + 1, ny + 3) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx, ny + 3, COLOR_BLUE_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx + 1, ny + 3, COLOR_BLUE_CRATE);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_BLUE_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_BLUE_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx + 3, ny) != COLOR_BLUE_GOAL) && (PS.color(nx + 3, ny) != COLOR_FLOOR)) || ((PS.color(nx + 3, ny + 1) != COLOR_BLUE_GOAL) && (PS.color(nx + 3, ny + 1) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx + 3, ny, COLOR_BLUE_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx + 3, ny + 1, COLOR_BLUE_CRATE);
				}
			} else if ((PS.color(nx, ny) == COLOR_BLUE_CRATE) && (PS.color(nx + 1, ny) == COLOR_BLUE_CRATE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx, ny - 2) != COLOR_BLUE_GOAL) && (PS.color(nx, ny - 2) != COLOR_FLOOR)) || ((PS.color(nx + 1, ny - 2) != COLOR_BLUE_GOAL) && (PS.color(nx + 1, ny - 2) != COLOR_FLOOR))) { //check to see if a wall is on the other side of the crate
					return; // if so, don't move
				} else {
					PS.color(nx, ny - 2, COLOR_BLUE_CRATE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx + 1, ny - 2, COLOR_BLUE_CRATE);
				}
			} else if (((PS.color(nx, ny) == COLOR_BLUE_CRATE) && (PS.color(nx, ny + 1) != COLOR_BLUE_CRATE)) || (((PS.color(nx, ny) != COLOR_BLUE_CRATE) && PS.color(nx, ny + 1) == COLOR_BLUE_CRATE))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_BLUE_CRATE) && (PS.color(nx + 1, ny + 1) != COLOR_BLUE_CRATE)) || ((PS.color(nx, ny + 1) != COLOR_BLUE_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_BLUE_CRATE))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_BLUE_CRATE) && (PS.color(nx + 1, ny + 1) != COLOR_BLUE_CRATE)) || ((PS.color(nx + 1, ny) != COLOR_BLUE_CRATE) && (PS.color(nx + 1, ny + 1) == COLOR_BLUE_CRATE))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_BLUE_CRATE) && (PS.color(nx + 1, ny) != COLOR_BLUE_CRATE)) || ((PS.color(nx, ny) != COLOR_BLUE_CRATE) && (PS.color(nx, ny + 1) == COLOR_BLUE_CRATE))) {
				return;
			}




			if ((PS.color(nx, ny) == COLOR_RED_BOX) && (PS.color(nx, ny + 1) == COLOR_RED_BOX)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_FLOOR) && (PS.color(nx - 2, ny) != COLOR_RED_TILE)) || ((PS.color(nx - 2, ny + 1) != COLOR_FLOOR) && (PS.color(nx - 2, ny + 1) != COLOR_RED_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx - 2, ny) == COLOR_RED_TILE) && (PS.color(nx - 2, ny + 1) == COLOR_RED_TILE)) {
					if (GAME.colorCounter == 1) {
						PS.color(nx - 2, ny, COLOR_RED_BOX);  // otherwise, make the blocks 2 over into the crate color
						PS.color(nx - 2, ny + 1, COLOR_RED_BOX);
					} else return;
				} else {
					PS.color(nx - 2, ny, COLOR_RED_BOX);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_RED_BOX);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_RED_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_RED_BOX)) { // if the top left and bottm left are not the craate, check bottom left and bottm right
				if (((PS.color(nx, ny + 3) != COLOR_FLOOR) && (PS.color(nx, ny + 3) != COLOR_RED_TILE)) || ((PS.color(nx + 1, ny + 3) != COLOR_FLOOR) && (PS.color(nx + 1, ny + 3) != COLOR_RED_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx, ny + 3) == COLOR_RED_TILE) && (PS.color(nx + 1, ny + 3) == COLOR_RED_TILE)) {
					if (GAME.colorCounter == 1) {
						PS.color(nx, ny + 3, COLOR_RED_BOX); // otherwise, move
						PS.color(nx + 1, ny + 3, COLOR_RED_BOX);
					} else return;
					} else {
					PS.color(nx, ny + 3, COLOR_RED_BOX); // otherwise, move
					PS.color(nx + 1, ny + 3, COLOR_RED_BOX);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_RED_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_RED_BOX)) { // if not either of the above, check top right and bottom right
				if (((PS.color(nx + 3, ny) != COLOR_FLOOR) && (PS.color(nx + 3, ny) != COLOR_RED_TILE)) || ((PS.color(nx + 3, ny + 1) != COLOR_FLOOR) && (PS.color(nx + 3, ny + 1) != COLOR_RED_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx + 3, ny) == COLOR_RED_TILE) && (PS.color(nx + 3, ny + 1) == COLOR_RED_TILE)) {
					if (GAME.colorCounter == 1) {
						PS.color(nx + 3, ny, COLOR_RED_BOX); // otherwise, move
						PS.color(nx + 3, ny + 1, COLOR_RED_BOX);
					} else return;
					}else {
					PS.color(nx + 3, ny, COLOR_RED_BOX); // otherwise, move
					PS.color(nx + 3, ny + 1, COLOR_RED_BOX);
				}
			} else if ((PS.color(nx, ny) == COLOR_RED_BOX) && (PS.color(nx + 1, ny) == COLOR_RED_BOX)) { // if none of the above, check top left and top right
				if (((PS.color(nx, ny - 2) != COLOR_FLOOR) && (PS.color(nx, ny - 2) != COLOR_RED_TILE)) || ((PS.color(nx + 1, ny - 2) != COLOR_FLOOR) && (PS.color(nx + 1, ny - 2) != COLOR_RED_TILE))) { //if so, check for wall
					return; // don't move
				}else if((PS.color(nx, ny - 2) == COLOR_RED_TILE) && (PS.color(nx + 1, ny - 2) == COLOR_RED_TILE)) {
					if (GAME.colorCounter == 1) {
						PS.color(nx, ny - 2, COLOR_RED_BOX); // otherwise, move
						PS.color(nx + 1, ny - 2, COLOR_RED_BOX);
					} else if (GAME.levelCount == 0){
						PS.color(nx, ny - 2, COLOR_RED_BOX); // otherwise, move
						PS.color(nx + 1, ny - 2, COLOR_RED_BOX);
					} else return;
				} else {
					PS.color(nx, ny - 2, COLOR_RED_BOX); // otherwise, move
					PS.color(nx + 1, ny - 2, COLOR_RED_BOX);
				}
			} else if (((PS.color(nx, ny) == COLOR_RED_BOX) && (PS.color(nx, ny + 1) != COLOR_RED_BOX)) || (((PS.color(nx, ny) != COLOR_RED_BOX) && PS.color(nx, ny + 1) == COLOR_RED_BOX))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_RED_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_RED_BOX)) || ((PS.color(nx, ny + 1) != COLOR_RED_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_RED_BOX))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_RED_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_RED_BOX)) || ((PS.color(nx + 1, ny) != COLOR_RED_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_RED_BOX))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_RED_BOX) && (PS.color(nx + 1, ny) != COLOR_RED_BOX)) || ((PS.color(nx, ny) != COLOR_RED_BOX) && (PS.color(nx, ny + 1) == COLOR_RED_BOX))) {
				return;
			}


			if ((PS.color(nx, ny) == COLOR_ORANGE_BOX) && (PS.color(nx, ny + 1) == COLOR_ORANGE_BOX)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_FLOOR) && (PS.color(nx - 2, ny) != COLOR_ORANGE_TILE)) || ((PS.color(nx - 2, ny + 1) != COLOR_FLOOR) && (PS.color(nx - 2, ny + 1) != COLOR_ORANGE_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx - 2, ny) == COLOR_ORANGE_TILE) && (PS.color(nx - 2, ny + 1) == COLOR_ORANGE_TILE)) {
					if (GAME.colorCounter == 2) {
						PS.color(nx - 2, ny, COLOR_ORANGE_BOX);  // otherwise, make the blocks 2 over into the crate color
						PS.color(nx - 2, ny + 1, COLOR_ORANGE_BOX);
					} else return;
				} else {
					PS.color(nx - 2, ny, COLOR_ORANGE_BOX);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_ORANGE_BOX);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_ORANGE_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_ORANGE_BOX)) { // if the top left and bottm left are not the craate, check bottom left and bottm right
				if (((PS.color(nx, ny + 3) != COLOR_FLOOR) && (PS.color(nx, ny + 3) != COLOR_ORANGE_TILE)) || ((PS.color(nx + 1, ny + 3) != COLOR_FLOOR) && (PS.color(nx + 1, ny + 3) != COLOR_ORANGE_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx, ny + 3) == COLOR_ORANGE_TILE) && (PS.color(nx + 1, ny + 3) == COLOR_ORANGE_TILE)) {
					if (GAME.colorCounter == 2) {
						PS.color(nx, ny + 3, COLOR_ORANGE_BOX); // otherwise, move
						PS.color(nx + 1, ny + 3, COLOR_ORANGE_BOX);
					} else return;
				} else {
					PS.color(nx, ny + 3, COLOR_ORANGE_BOX); // otherwise, move
					PS.color(nx + 1, ny + 3, COLOR_ORANGE_BOX);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_ORANGE_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_ORANGE_BOX)) { // if not either of the above, check top right and bottom right
				if (((PS.color(nx + 3, ny) != COLOR_FLOOR) && (PS.color(nx + 3, ny) != COLOR_ORANGE_TILE)) || ((PS.color(nx + 3, ny + 1) != COLOR_FLOOR) && (PS.color(nx + 3, ny + 1) != COLOR_ORANGE_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx + 3, ny) == COLOR_ORANGE_TILE) && (PS.color(nx + 3, ny + 1) == COLOR_ORANGE_TILE)) {
					if (GAME.colorCounter == 2) {
						PS.color(nx + 3, ny, COLOR_ORANGE_BOX); // otherwise, move
						PS.color(nx + 3, ny + 1, COLOR_ORANGE_BOX);
					} else return;
				}else {
					PS.color(nx + 3, ny, COLOR_ORANGE_BOX); // otherwise, move
					PS.color(nx + 3, ny + 1, COLOR_ORANGE_BOX);
				}
			} else if ((PS.color(nx, ny) == COLOR_ORANGE_BOX) && (PS.color(nx + 1, ny) == COLOR_ORANGE_BOX)) { // if none of the above, check top left and top right
				if (((PS.color(nx, ny - 2) != COLOR_FLOOR) && (PS.color(nx, ny - 2) != COLOR_ORANGE_TILE)) || ((PS.color(nx + 1, ny - 2) != COLOR_FLOOR) && (PS.color(nx + 1, ny - 2) != COLOR_ORANGE_TILE))) { //if so, check for wall
					return; // don't move
				}else if((PS.color(nx, ny - 2) == COLOR_ORANGE_TILE) && (PS.color(nx + 1, ny - 2) == COLOR_ORANGE_TILE)) {
					if (GAME.colorCounter == 2) {
						PS.color(nx, ny - 2, COLOR_ORANGE_BOX); // otherwise, move
						PS.color(nx + 1, ny - 2, COLOR_ORANGE_BOX);
					} else return;
				} else {
					PS.color(nx, ny - 2, COLOR_ORANGE_BOX); // otherwise, move
					PS.color(nx + 1, ny - 2, COLOR_ORANGE_BOX);
				}
			} else if (((PS.color(nx, ny) == COLOR_ORANGE_BOX) && (PS.color(nx, ny + 1) != COLOR_ORANGE_BOX)) || (((PS.color(nx, ny) != COLOR_ORANGE_BOX) && PS.color(nx, ny + 1) == COLOR_ORANGE_BOX))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_ORANGE_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_ORANGE_BOX)) || ((PS.color(nx, ny + 1) != COLOR_ORANGE_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_ORANGE_BOX))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_ORANGE_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_ORANGE_BOX)) || ((PS.color(nx + 1, ny) != COLOR_ORANGE_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_ORANGE_BOX))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_ORANGE_BOX) && (PS.color(nx + 1, ny) != COLOR_ORANGE_BOX)) || ((PS.color(nx, ny) != COLOR_ORANGE_BOX) && (PS.color(nx, ny + 1) == COLOR_ORANGE_BOX))) {
				return;
			}


			if ((PS.color(nx, ny) == COLOR_YELLOW_BOX) && (PS.color(nx, ny + 1) == COLOR_YELLOW_BOX)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_FLOOR) && (PS.color(nx - 2, ny) != COLOR_YELLOW_TILE)) || ((PS.color(nx - 2, ny + 1) != COLOR_FLOOR) && (PS.color(nx - 2, ny + 1) != COLOR_YELLOW_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx - 2, ny) == COLOR_YELLOW_TILE) && (PS.color(nx - 2, ny + 1) == COLOR_YELLOW_TILE)) {
					if (GAME.colorCounter == 3) {
						PS.color(nx - 2, ny, COLOR_YELLOW_BOX);  // otherwise, make the blocks 2 over into the crate color
						PS.color(nx - 2, ny + 1, COLOR_YELLOW_BOX);
					} else return;
				} else {
					PS.color(nx - 2, ny, COLOR_YELLOW_BOX);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_YELLOW_BOX);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_YELLOW_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_YELLOW_BOX)) { // if the top left and bottm left are not the craate, check bottom left and bottm right
				if (((PS.color(nx, ny + 3) != COLOR_FLOOR) && (PS.color(nx, ny + 3) != COLOR_YELLOW_TILE)) || ((PS.color(nx + 1, ny + 3) != COLOR_FLOOR) && (PS.color(nx + 1, ny + 3) != COLOR_YELLOW_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx, ny + 3) == COLOR_YELLOW_TILE) && (PS.color(nx + 1, ny + 3) == COLOR_YELLOW_TILE)) {
					if (GAME.colorCounter == 3) {
						PS.color(nx, ny + 3, COLOR_YELLOW_BOX); // otherwise, move
						PS.color(nx + 1, ny + 3, COLOR_YELLOW_BOX);
					} else return;
				} else {
					PS.color(nx, ny + 3, COLOR_YELLOW_BOX); // otherwise, move
					PS.color(nx + 1, ny + 3, COLOR_YELLOW_BOX);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_YELLOW_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_YELLOW_BOX)) { // if not either of the above, check top right and bottom right
				if (((PS.color(nx + 3, ny) != COLOR_FLOOR) && (PS.color(nx + 3, ny) != COLOR_YELLOW_TILE)) || ((PS.color(nx + 3, ny + 1) != COLOR_FLOOR) && (PS.color(nx + 3, ny + 1) != COLOR_YELLOW_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx + 3, ny) == COLOR_YELLOW_TILE) && (PS.color(nx + 3, ny + 1) == COLOR_YELLOW_TILE)) {
					if (GAME.colorCounter == 3) {
						PS.color(nx + 3, ny, COLOR_YELLOW_BOX); // otherwise, move
						PS.color(nx + 3, ny + 1, COLOR_YELLOW_BOX);
					} else return;
				}else {
					PS.color(nx + 3, ny, COLOR_YELLOW_BOX); // otherwise, move
					PS.color(nx + 3, ny + 1, COLOR_YELLOW_BOX);
				}
			} else if ((PS.color(nx, ny) == COLOR_YELLOW_BOX) && (PS.color(nx + 1, ny) == COLOR_YELLOW_BOX)) { // if none of the above, check top left and top right
				if (((PS.color(nx, ny - 2) != COLOR_FLOOR) && (PS.color(nx, ny - 2) != COLOR_YELLOW_TILE)) || ((PS.color(nx + 1, ny - 2) != COLOR_FLOOR) && (PS.color(nx + 1, ny - 2) != COLOR_YELLOW_TILE))) { //if so, check for wall
					return; // don't move
				}else if((PS.color(nx, ny - 2) == COLOR_YELLOW_TILE) && (PS.color(nx + 1, ny - 2) == COLOR_YELLOW_TILE)) {
					if (GAME.colorCounter == 3) {
						PS.color(nx, ny - 2, COLOR_YELLOW_BOX); // otherwise, move
						PS.color(nx + 1, ny - 2, COLOR_YELLOW_BOX);
					} else return;
				} else {
					PS.color(nx, ny - 2, COLOR_YELLOW_BOX); // otherwise, move
					PS.color(nx + 1, ny - 2, COLOR_YELLOW_BOX);
				}
			} else if (((PS.color(nx, ny) == COLOR_YELLOW_BOX) && (PS.color(nx, ny + 1) != COLOR_YELLOW_BOX)) || (((PS.color(nx, ny) != COLOR_YELLOW_BOX) && PS.color(nx, ny + 1) == COLOR_YELLOW_BOX))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_YELLOW_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_YELLOW_BOX)) || ((PS.color(nx, ny + 1) != COLOR_YELLOW_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_YELLOW_BOX))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_YELLOW_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_YELLOW_BOX)) || ((PS.color(nx + 1, ny) != COLOR_YELLOW_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_YELLOW_BOX))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_YELLOW_BOX) && (PS.color(nx + 1, ny) != COLOR_YELLOW_BOX)) || ((PS.color(nx, ny) != COLOR_YELLOW_BOX) && (PS.color(nx, ny + 1) == COLOR_YELLOW_BOX))) {
				return;
			}


			if ((PS.color(nx, ny) == COLOR_GREEN_BOX) && (PS.color(nx, ny + 1) == COLOR_GREEN_BOX)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_FLOOR) && (PS.color(nx - 2, ny) != COLOR_GREEN_TILE)) || ((PS.color(nx - 2, ny + 1) != COLOR_FLOOR) && (PS.color(nx - 2, ny + 1) != COLOR_GREEN_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx - 2, ny) == COLOR_GREEN_TILE) && (PS.color(nx - 2, ny + 1) == COLOR_GREEN_TILE)) {
					if (GAME.colorCounter == 4) {
						PS.color(nx - 2, ny, COLOR_GREEN_BOX);  // otherwise, make the blocks 2 over into the crate color
						PS.color(nx - 2, ny + 1, COLOR_GREEN_BOX);
					} else return;
				} else {
					PS.color(nx - 2, ny, COLOR_GREEN_BOX);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_GREEN_BOX);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_GREEN_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_GREEN_BOX)) { // if the top left and bottm left are not the craate, check bottom left and bottm right
				if (((PS.color(nx, ny + 3) != COLOR_FLOOR) && (PS.color(nx, ny + 3) != COLOR_GREEN_TILE)) || ((PS.color(nx + 1, ny + 3) != COLOR_FLOOR) && (PS.color(nx + 1, ny + 3) != COLOR_GREEN_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx, ny + 3) == COLOR_GREEN_TILE) && (PS.color(nx + 1, ny + 3) == COLOR_GREEN_TILE)) {
					if (GAME.colorCounter == 4) {
						PS.color(nx, ny + 3, COLOR_GREEN_BOX); // otherwise, move
						PS.color(nx + 1, ny + 3, COLOR_GREEN_BOX);
					} else return;
				} else {
					PS.color(nx, ny + 3, COLOR_GREEN_BOX); // otherwise, move
					PS.color(nx + 1, ny + 3, COLOR_GREEN_BOX);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_GREEN_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_GREEN_BOX)) { // if not either of the above, check top right and bottom right
				if (((PS.color(nx + 3, ny) != COLOR_FLOOR) && (PS.color(nx + 3, ny) != COLOR_GREEN_TILE)) || ((PS.color(nx + 3, ny + 1) != COLOR_FLOOR) && (PS.color(nx + 3, ny + 1) != COLOR_GREEN_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx + 3, ny) == COLOR_GREEN_TILE) && (PS.color(nx + 3, ny + 1) == COLOR_GREEN_TILE)) {
					if (GAME.colorCounter == 4) {
						PS.color(nx + 3, ny, COLOR_GREEN_BOX); // otherwise, move
						PS.color(nx + 3, ny + 1, COLOR_GREEN_BOX);
					} else return;
				}else {
					PS.color(nx + 3, ny, COLOR_GREEN_BOX); // otherwise, move
					PS.color(nx + 3, ny + 1, COLOR_GREEN_BOX);
				}
			} else if ((PS.color(nx, ny) == COLOR_GREEN_BOX) && (PS.color(nx + 1, ny) == COLOR_GREEN_BOX)) { // if none of the above, check top left and top right
				if (((PS.color(nx, ny - 2) != COLOR_FLOOR) && (PS.color(nx, ny - 2) != COLOR_GREEN_TILE)) || ((PS.color(nx + 1, ny - 2) != COLOR_FLOOR) && (PS.color(nx + 1, ny - 2) != COLOR_GREEN_TILE))) { //if so, check for wall
					return; // don't move
				}else if((PS.color(nx, ny - 2) == COLOR_GREEN_TILE) && (PS.color(nx + 1, ny - 2) == COLOR_GREEN_TILE)) {
					if (GAME.colorCounter == 4) {
						PS.color(nx, ny - 2, COLOR_GREEN_BOX); // otherwise, move
						PS.color(nx + 1, ny - 2, COLOR_GREEN_BOX);
					} else return;
				} else {
					PS.color(nx, ny - 2, COLOR_GREEN_BOX); // otherwise, move
					PS.color(nx + 1, ny - 2, COLOR_GREEN_BOX);
				}
			} else if (((PS.color(nx, ny) == COLOR_GREEN_BOX) && (PS.color(nx, ny + 1) != COLOR_GREEN_BOX)) || (((PS.color(nx, ny) != COLOR_RED_BOX) && PS.color(nx, ny + 1) == COLOR_GREEN_BOX))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_GREEN_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_GREEN_BOX)) || ((PS.color(nx, ny + 1) != COLOR_GREEN_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_GREEN_BOX))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_GREEN_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_GREEN_BOX)) || ((PS.color(nx + 1, ny) != COLOR_GREEN_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_GREEN_BOX))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_GREEN_BOX) && (PS.color(nx + 1, ny) != COLOR_GREEN_BOX)) || ((PS.color(nx, ny) != COLOR_GREEN_BOX) && (PS.color(nx, ny + 1) == COLOR_GREEN_BOX))) {
				return;
			}


			if ((PS.color(nx, ny) == COLOR_BLUE_BOX) && (PS.color(nx, ny + 1) == COLOR_BLUE_BOX)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_FLOOR) && (PS.color(nx - 2, ny) != COLOR_BLUE_TILE)) || ((PS.color(nx - 2, ny + 1) != COLOR_FLOOR) && (PS.color(nx - 2, ny + 1) != COLOR_BLUE_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx - 2, ny) == COLOR_BLUE_TILE) && (PS.color(nx - 2, ny + 1) == COLOR_BLUE_TILE)) {
					if (GAME.colorCounter == 5) {
						PS.color(nx - 2, ny, COLOR_BLUE_BOX);  // otherwise, make the blocks 2 over into the crate color
						PS.color(nx - 2, ny + 1, COLOR_BLUE_BOX);
					} else return;
				} else {
					PS.color(nx - 2, ny, COLOR_BLUE_BOX);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_BLUE_BOX);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_BLUE_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_BLUE_BOX)) { // if the top left and bottm left are not the craate, check bottom left and bottm right
				if (((PS.color(nx, ny + 3) != COLOR_FLOOR) && (PS.color(nx, ny + 3) != COLOR_BLUE_TILE)) || ((PS.color(nx + 1, ny + 3) != COLOR_FLOOR) && (PS.color(nx + 1, ny + 3) != COLOR_BLUE_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx, ny + 3) == COLOR_BLUE_TILE) && (PS.color(nx + 1, ny + 3) == COLOR_BLUE_TILE)) {
					if (GAME.colorCounter == 5) {
						PS.color(nx, ny + 3, COLOR_BLUE_BOX); // otherwise, move
						PS.color(nx + 1, ny + 3, COLOR_BLUE_BOX);
					} else return;
				} else {
					PS.color(nx, ny + 3, COLOR_BLUE_BOX); // otherwise, move
					PS.color(nx + 1, ny + 3, COLOR_BLUE_BOX);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_BLUE_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_BLUE_BOX)) { // if not either of the above, check top right and bottom right
				if (((PS.color(nx + 3, ny) != COLOR_FLOOR) && (PS.color(nx + 3, ny) != COLOR_BLUE_TILE)) || ((PS.color(nx + 3, ny + 1) != COLOR_FLOOR) && (PS.color(nx + 3, ny + 1) != COLOR_BLUE_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx + 3, ny) == COLOR_BLUE_TILE) && (PS.color(nx + 3, ny + 1) == COLOR_BLUE_TILE)) {
					if (GAME.colorCounter == 5) {
						PS.color(nx + 3, ny, COLOR_BLUE_BOX); // otherwise, move
						PS.color(nx + 3, ny + 1, COLOR_BLUE_BOX);
					} else return;
				}else {
					PS.color(nx + 3, ny, COLOR_BLUE_BOX); // otherwise, move
					PS.color(nx + 3, ny + 1, COLOR_BLUE_BOX);
				}
			} else if ((PS.color(nx, ny) == COLOR_BLUE_BOX) && (PS.color(nx + 1, ny) == COLOR_BLUE_BOX)) { // if none of the above, check top left and top right
				if (((PS.color(nx, ny - 2) != COLOR_FLOOR) && (PS.color(nx, ny - 2) != COLOR_BLUE_TILE)) || ((PS.color(nx + 1, ny - 2) != COLOR_FLOOR) && (PS.color(nx + 1, ny - 2) != COLOR_BLUE_TILE))) { //if so, check for wall
					return; // don't move
				}else if((PS.color(nx, ny - 2) == COLOR_BLUE_TILE) && (PS.color(nx + 1, ny - 2) == COLOR_BLUE_TILE)) {
					if (GAME.colorCounter == 5) {
						PS.color(nx, ny - 2, COLOR_BLUE_BOX); // otherwise, move
						PS.color(nx + 1, ny - 2, COLOR_BLUE_BOX);
					} else if (GAME.levelCount == 0){
						PS.color(nx, ny - 2, COLOR_BLUE_BOX); // otherwise, move
						PS.color(nx + 1, ny - 2, COLOR_BLUE_BOX);
					} else return;
				} else {
					PS.color(nx, ny - 2, COLOR_BLUE_BOX); // otherwise, move
					PS.color(nx + 1, ny - 2, COLOR_BLUE_BOX);
				}
			} else if (((PS.color(nx, ny) == COLOR_BLUE_BOX) && (PS.color(nx, ny + 1) != COLOR_BLUE_BOX)) || (((PS.color(nx, ny) != COLOR_BLUE_BOX) && PS.color(nx, ny + 1) == COLOR_BLUE_BOX))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_BLUE_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_BLUE_BOX)) || ((PS.color(nx, ny + 1) != COLOR_BLUE_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_BLUE_BOX))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_BLUE_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_BLUE_BOX)) || ((PS.color(nx + 1, ny) != COLOR_BLUE_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_BLUE_BOX))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_BLUE_BOX) && (PS.color(nx + 1, ny) != COLOR_BLUE_BOX)) || ((PS.color(nx, ny) != COLOR_BLUE_BOX) && (PS.color(nx, ny + 1) == COLOR_BLUE_BOX))) {
				return;
			}


			if ((PS.color(nx, ny) == COLOR_INDIGO_BOX) && (PS.color(nx, ny + 1) == COLOR_INDIGO_BOX)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_FLOOR) && (PS.color(nx - 2, ny) != COLOR_INDIGO_TILE)) || ((PS.color(nx - 2, ny + 1) != COLOR_FLOOR) && (PS.color(nx - 2, ny + 1) != COLOR_INDIGO_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx - 2, ny) == COLOR_INDIGO_TILE) && (PS.color(nx - 2, ny + 1) == COLOR_INDIGO_TILE)) {
					if (GAME.colorCounter == 6) {
						PS.color(nx - 2, ny, COLOR_INDIGO_BOX);  // otherwise, make the blocks 2 over into the crate color
						PS.color(nx - 2, ny + 1, COLOR_INDIGO_BOX);
					} else return;
				} else {
					PS.color(nx - 2, ny, COLOR_INDIGO_BOX);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_INDIGO_BOX);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_INDIGO_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_INDIGO_BOX)) { // if the top left and bottm left are not the craate, check bottom left and bottm right
				if (((PS.color(nx, ny + 3) != COLOR_FLOOR) && (PS.color(nx, ny + 3) != COLOR_INDIGO_TILE)) || ((PS.color(nx + 1, ny + 3) != COLOR_FLOOR) && (PS.color(nx + 1, ny + 3) != COLOR_INDIGO_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx, ny + 3) == COLOR_INDIGO_TILE) && (PS.color(nx + 1, ny + 3) == COLOR_INDIGO_TILE)) {
					if (GAME.colorCounter == 6) {
						PS.color(nx, ny + 3, COLOR_INDIGO_BOX); // otherwise, move
						PS.color(nx + 1, ny + 3, COLOR_INDIGO_BOX);
					} else return;
				} else {
					PS.color(nx, ny + 3, COLOR_INDIGO_BOX); // otherwise, move
					PS.color(nx + 1, ny + 3, COLOR_INDIGO_BOX);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_INDIGO_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_INDIGO_BOX)) { // if not either of the above, check top right and bottom right
				if (((PS.color(nx + 3, ny) != COLOR_FLOOR) && (PS.color(nx + 3, ny) != COLOR_INDIGO_TILE)) || ((PS.color(nx + 3, ny + 1) != COLOR_FLOOR) && (PS.color(nx + 3, ny + 1) != COLOR_INDIGO_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx + 3, ny) == COLOR_INDIGO_TILE) && (PS.color(nx + 3, ny + 1) == COLOR_INDIGO_TILE)) {
					if (GAME.colorCounter == 6) {
						PS.color(nx + 3, ny, COLOR_INDIGO_BOX); // otherwise, move
						PS.color(nx + 3, ny + 1, COLOR_INDIGO_BOX);
					} else return;
				}else {
					PS.color(nx + 3, ny, COLOR_INDIGO_BOX); // otherwise, move
					PS.color(nx + 3, ny + 1, COLOR_INDIGO_BOX);
				}
			} else if ((PS.color(nx, ny) == COLOR_INDIGO_BOX) && (PS.color(nx + 1, ny) == COLOR_INDIGO_BOX)) { // if none of the above, check top left and top right
				if (((PS.color(nx, ny - 2) != COLOR_FLOOR) && (PS.color(nx, ny - 2) != COLOR_INDIGO_TILE)) || ((PS.color(nx + 1, ny - 2) != COLOR_FLOOR) && (PS.color(nx + 1, ny - 2) != COLOR_INDIGO_TILE))) { //if so, check for wall
					return; // don't move
				}else if((PS.color(nx, ny - 2) == COLOR_INDIGO_TILE) && (PS.color(nx + 1, ny - 2) == COLOR_INDIGO_TILE)) {
					if (GAME.colorCounter == 6) {
						PS.color(nx, ny - 2, COLOR_INDIGO_BOX); // otherwise, move
						PS.color(nx + 1, ny - 2, COLOR_INDIGO_BOX);
					} else return;
				} else {
					PS.color(nx, ny - 2, COLOR_INDIGO_BOX); // otherwise, move
					PS.color(nx + 1, ny - 2, COLOR_INDIGO_BOX);
				}
			} else if (((PS.color(nx, ny) == COLOR_INDIGO_BOX) && (PS.color(nx, ny + 1) != COLOR_INDIGO_BOX)) || (((PS.color(nx, ny) != COLOR_INDIGO_BOX) && PS.color(nx, ny + 1) == COLOR_INDIGO_BOX))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_INDIGO_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_INDIGO_BOX)) || ((PS.color(nx, ny + 1) != COLOR_INDIGO_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_INDIGO_BOX))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_INDIGO_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_INDIGO_BOX)) || ((PS.color(nx + 1, ny) != COLOR_INDIGO_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_INDIGO_BOX))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_INDIGO_BOX) && (PS.color(nx + 1, ny) != COLOR_INDIGO_BOX)) || ((PS.color(nx, ny) != COLOR_INDIGO_BOX) && (PS.color(nx, ny + 1) == COLOR_INDIGO_BOX))) {
				return;
			}


			if ((PS.color(nx, ny) == COLOR_VIOLET_BOX) && (PS.color(nx, ny + 1) == COLOR_VIOLET_BOX)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_FLOOR) && (PS.color(nx - 2, ny) != COLOR_VIOLET_TILE)) || ((PS.color(nx - 2, ny + 1) != COLOR_FLOOR) && (PS.color(nx - 2, ny + 1) != COLOR_VIOLET_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx - 2, ny) == COLOR_VIOLET_TILE) && (PS.color(nx - 2, ny + 1) == COLOR_VIOLET_TILE)) {
					if (GAME.colorCounter == 7) {
						PS.color(nx - 2, ny, COLOR_VIOLET_BOX);  // otherwise, make the blocks 2 over into the crate color
						PS.color(nx - 2, ny + 1, COLOR_VIOLET_BOX);
					} else return;
				} else {
					PS.color(nx - 2, ny, COLOR_VIOLET_BOX);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, COLOR_VIOLET_BOX);
				}
			} else if ((PS.color(nx, ny + 1) == COLOR_VIOLET_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_VIOLET_BOX)) { // if the top left and bottm left are not the craate, check bottom left and bottm right
				if (((PS.color(nx, ny + 3) != COLOR_FLOOR) && (PS.color(nx, ny + 3) != COLOR_VIOLET_TILE)) || ((PS.color(nx + 1, ny + 3) != COLOR_FLOOR) && (PS.color(nx + 1, ny + 3) != COLOR_VIOLET_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx, ny + 3) == COLOR_VIOLET_TILE) && (PS.color(nx + 1, ny + 3) == COLOR_VIOLET_TILE)) {
					if (GAME.colorCounter == 7) {
						PS.color(nx, ny + 3, COLOR_VIOLET_BOX); // otherwise, move
						PS.color(nx + 1, ny + 3, COLOR_VIOLET_BOX);
					} else return;
				} else {
					PS.color(nx, ny + 3, COLOR_VIOLET_BOX); // otherwise, move
					PS.color(nx + 1, ny + 3, COLOR_VIOLET_BOX);
				}
			} else if ((PS.color(nx + 1, ny) == COLOR_VIOLET_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_VIOLET_BOX)) { // if not either of the above, check top right and bottom right
				if (((PS.color(nx + 3, ny) != COLOR_FLOOR) && (PS.color(nx + 3, ny) != COLOR_VIOLET_TILE)) || ((PS.color(nx + 3, ny + 1) != COLOR_FLOOR) && (PS.color(nx + 3, ny + 1) != COLOR_VIOLET_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx + 3, ny) == COLOR_VIOLET_TILE) && (PS.color(nx + 3, ny + 1) == COLOR_VIOLET_TILE)) {
					if (GAME.colorCounter == 7) {
						PS.color(nx + 3, ny, COLOR_VIOLET_BOX); // otherwise, move
						PS.color(nx + 3, ny + 1, COLOR_VIOLET_BOX);
					} else return;
				}else {
					PS.color(nx + 3, ny, COLOR_VIOLET_BOX); // otherwise, move
					PS.color(nx + 3, ny + 1, COLOR_VIOLET_BOX);
				}
			} else if ((PS.color(nx, ny) == COLOR_VIOLET_BOX) && (PS.color(nx + 1, ny) == COLOR_VIOLET_BOX)) { // if none of the above, check top left and top right
				if (((PS.color(nx, ny - 2) != COLOR_FLOOR) && (PS.color(nx, ny - 2) != COLOR_VIOLET_TILE)) || ((PS.color(nx + 1, ny - 2) != COLOR_FLOOR) && (PS.color(nx + 1, ny - 2) != COLOR_VIOLET_TILE))) { //if so, check for wall
					return; // don't move
				}else if((PS.color(nx, ny - 2) == COLOR_VIOLET_TILE) && (PS.color(nx + 1, ny - 2) == COLOR_VIOLET_TILE)) {
					if (GAME.colorCounter == 7) {
						PS.color(nx, ny - 2, COLOR_VIOLET_BOX); // otherwise, move
						PS.color(nx + 1, ny - 2, COLOR_VIOLET_BOX);
					} else return;
				} else {
					PS.color(nx, ny - 2, COLOR_VIOLET_BOX); // otherwise, move
					PS.color(nx + 1, ny - 2, COLOR_VIOLET_BOX);
				}
			} else if (((PS.color(nx, ny) == COLOR_VIOLET_BOX) && (PS.color(nx, ny + 1) != COLOR_VIOLET_BOX)) || (((PS.color(nx, ny) != COLOR_VIOLET_BOX) && PS.color(nx, ny + 1) == COLOR_VIOLET_BOX))) {
				return;
			} else if (((PS.color(nx, ny + 1) == COLOR_VIOLET_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_VIOLET_BOX)) || ((PS.color(nx, ny + 1) != COLOR_VIOLET_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_VIOLET_BOX))) {
				return;
			} else if (((PS.color(nx + 1, ny) == COLOR_VIOLET_BOX) && (PS.color(nx + 1, ny + 1) != COLOR_VIOLET_BOX)) || ((PS.color(nx + 1, ny) != COLOR_VIOLET_BOX) && (PS.color(nx + 1, ny + 1) == COLOR_VIOLET_BOX))) {
				return;
			} else if (((PS.color(nx, ny) == COLOR_VIOLET_BOX) && (PS.color(nx + 1, ny) != COLOR_VIOLET_BOX)) || ((PS.color(nx, ny) != COLOR_VIOLET_BOX) && (PS.color(nx, ny + 1) == COLOR_VIOLET_BOX))) {
				return;
			}


			if ((PS.color(nx, ny) == PS.COLOR_WHITE) && (PS.color(nx, ny + 1) == PS.COLOR_WHITE)) { // if the top left and bottom left corners are the crate
				if (((PS.color(nx - 2, ny) != COLOR_FLOOR) && (PS.color(nx - 2, ny) != COLOR_WHITE_TILE)) || ((PS.color(nx - 2, ny + 1) != COLOR_FLOOR) && (PS.color(nx - 2, ny + 1) != COLOR_WHITE_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx - 2, ny) == COLOR_WHITE_TILE) && (PS.color(nx - 2, ny + 1) == COLOR_WHITE_TILE)) {
					if (GAME.colorCounter == 8) {
						PS.color(nx - 2, ny, PS.COLOR_WHITE);  // otherwise, make the blocks 2 over into the crate color
						PS.color(nx - 2, ny + 1, PS.COLOR_WHITE);
					} else return;
				} else {
					PS.color(nx - 2, ny, PS.COLOR_WHITE);  // otherwise, make the blocks 2 over into the crate color
					PS.color(nx - 2, ny + 1, PS.COLOR_WHITE);
				}
			} else if ((PS.color(nx, ny + 1) == PS.COLOR_WHITE) && (PS.color(nx + 1, ny + 1) == PS.COLOR_WHITE)) { // if the top left and bottm left are not the craate, check bottom left and bottm right
				if (((PS.color(nx, ny + 3) != COLOR_FLOOR) && (PS.color(nx, ny + 3) != COLOR_WHITE_TILE)) || ((PS.color(nx + 1, ny + 3) != COLOR_FLOOR) && (PS.color(nx + 1, ny + 3) != COLOR_WHITE_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx, ny + 3) == COLOR_WHITE_TILE) && (PS.color(nx + 1, ny + 3) == COLOR_WHITE_TILE)) {
					if (GAME.colorCounter == 8) {
						PS.color(nx, ny + 3, PS.COLOR_WHITE); // otherwise, move
						PS.color(nx + 1, ny + 3, PS.COLOR_WHITE);
					} else return;
				} else {
					PS.color(nx, ny + 3, PS.COLOR_WHITE); // otherwise, move
					PS.color(nx + 1, ny + 3, PS.COLOR_WHITE);
				}
			} else if ((PS.color(nx + 1, ny) == PS.COLOR_WHITE) && (PS.color(nx + 1, ny + 1) == PS.COLOR_WHITE)) { // if not either of the above, check top right and bottom right
				if (((PS.color(nx + 3, ny) != COLOR_FLOOR) && (PS.color(nx + 3, ny) != COLOR_WHITE_TILE)) || ((PS.color(nx + 3, ny + 1) != COLOR_FLOOR) && (PS.color(nx + 3, ny + 1) != COLOR_WHITE_TILE))) { //if so, check for wall
					return; // don't move
				} else if((PS.color(nx + 3, ny) == COLOR_WHITE_TILE) && (PS.color(nx + 3, ny + 1) == COLOR_WHITE_TILE)) {
					if (GAME.colorCounter == 8) {
						PS.color(nx + 3, ny, PS.COLOR_WHITE); // otherwise, move
						PS.color(nx + 3, ny + 1, PS.COLOR_WHITE);
					} else return;
				}else {
					PS.color(nx + 3, ny, PS.COLOR_WHITE); // otherwise, move
					PS.color(nx + 3, ny + 1, PS.COLOR_WHITE);
				}
			} else if ((PS.color(nx, ny) == PS.COLOR_WHITE) && (PS.color(nx + 1, ny) == PS.COLOR_WHITE)) { // if none of the above, check top left and top right
				if (((PS.color(nx, ny - 2) != COLOR_FLOOR) && (PS.color(nx, ny - 2) != COLOR_WHITE_TILE)) || ((PS.color(nx + 1, ny - 2) != COLOR_FLOOR) && (PS.color(nx + 1, ny - 2) != COLOR_WHITE_TILE))) { //if so, check for wall
					return; // don't move
				}else if((PS.color(nx, ny - 2) == COLOR_WHITE_TILE) && (PS.color(nx + 1, ny - 2) == COLOR_WHITE_TILE)) {
					if (GAME.colorCounter == 8) {
						PS.color(nx, ny - 2, PS.COLOR_WHITE); // otherwise, move
						PS.color(nx + 1, ny - 2, PS.COLOR_WHITE);
					} else return;
				} else {
					PS.color(nx, ny - 2, PS.COLOR_WHITE); // otherwise, move
					PS.color(nx + 1, ny - 2, PS.COLOR_WHITE);
				}
			} else if (((PS.color(nx, ny) == PS.COLOR_WHITE) && (PS.color(nx, ny + 1) != PS.COLOR_WHITE)) || (((PS.color(nx, ny) != PS.COLOR_WHITE) && PS.color(nx, ny + 1) == PS.COLOR_WHITE))) {
				return;
			} else if (((PS.color(nx, ny + 1) == PS.COLOR_WHITE) && (PS.color(nx + 1, ny + 1) != PS.COLOR_WHITE)) || ((PS.color(nx, ny + 1) != PS.COLOR_WHITE) && (PS.color(nx + 1, ny + 1) == PS.COLOR_WHITE))) {
				return;
			} else if (((PS.color(nx + 1, ny) == PS.COLOR_WHITE) && (PS.color(nx + 1, ny + 1) != PS.COLOR_WHITE)) || ((PS.color(nx + 1, ny) != PS.COLOR_WHITE) && (PS.color(nx + 1, ny + 1) == PS.COLOR_WHITE))) {
				return;
			} else if (((PS.color(nx, ny) == PS.COLOR_WHITE) && (PS.color(nx + 1, ny) != PS.COLOR_WHITE)) || ((PS.color(nx, ny) != PS.COLOR_WHITE) && (PS.color(nx, ny + 1) == PS.COLOR_WHITE))) {
				return;
			}



			// Is new location off the grid?
			// If so, exit without moving.
			// NOTE: Current map design would never
			// allow grabber to get past the edge walls.
			// This code will prevent errors if
			// the map layout is changed.

			if ((nx < 0) || (nx >= WIDTH) ||
				(ny < 0) || (ny >= HEIGHT)) {
				return;
			}

			// Legal move, so change current grabber
			// location to floor color.

			/*if (((playerUpper_x == 7) && (playerUpper_y == 7)) || ((playerUpper_x == 8) && (playerUpper_y == 7))){
				PS.color(playerUpper_x, playerUpper_y, COLOR_NEXT_LEVEL);
			} else {
				PS.color(playerUpper_x, playerUpper_y, COLOR_FLOOR);
			};
			if (((playerUpper_x + 1 == 8) && (playerUpper_y == 7)) || ((playerUpper_x + 1 == 7) && (playerUpper_y == 7))){
				PS.color(playerUpper_x + 1, playerUpper_y, COLOR_NEXT_LEVEL);
			} else {
				PS.color(playerUpper_x + 1, playerUpper_y, COLOR_FLOOR);
			};
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_FLOOR);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_FLOOR);*/

			PS.color(playerUpper_x, playerUpper_y, COLOR_FLOOR);
			PS.color(playerUpper_x + 1, playerUpper_y, COLOR_FLOOR);
			PS.color(playerUpper_x, playerUpper_y + 1, COLOR_FLOOR);
			PS.color(playerUpper_x + 1, playerUpper_y + 1, COLOR_FLOOR);


			// Assign grabber's color to the
			// new location.

			PS.color(nx, ny, COLOR_PLAYER);
			PS.color(nx + 1, ny + 1, COLOR_PLAYER);
			PS.color(nx + 1, ny, COLOR_PLAYER);
			PS.color(nx, ny + 1, COLOR_PLAYER);
			PS.audioPlay("fx_click");

			// Finally, update grabber's position

			playerUpper_x = nx;
			playerUpper_y = ny;
		},

		selectDifficulty: function () {
			if (PS.color(1, 1) == COLOR_RED_BOX){
				GAME.isHard = 0;
				PS.statusText("You've chosen Easy. Press Enter");
			}
			else if (PS.color(30, 1) == COLOR_BLUE_BOX){
				GAME.isHard = 1;
				GAME.levelCount = 5;
				PS.statusText("You've chosen Hard. Press Enter");
			}
		},

		winEasy1: function () {
			if (PS.color(1, 1) == COLOR_CRATE) {
				if (PS.color(22, 5) == COLOR_CRATE) {
					if (PS.color(21, 12) == COLOR_CRATE) {
						if (PS.color(1, 30) == COLOR_CRATE) {
							if (PS.color(23, 30) == COLOR_CRATE) {
								PS.statusText("Press Enter to continue!");
								GAME.levelCount = 2;
								if (GAME.isBeat == 0){
									PS.audioPlay("fx_tada");
									GAME.isBeat = 1;
								}
							}
						}
					}
				}
			}
	},

		winEasy2: function () {
			if (PS.color(26, 8) == COLOR_CRATE){
				if (PS.color(7, 11) == COLOR_CRATE){
					if (PS.color(30, 11) == COLOR_CRATE){
						if (PS.color(1, 25) == COLOR_CRATE){
							if (PS.color(11, 29) == COLOR_CRATE){
								if (PS.color(22, 25) == COLOR_CRATE){
									if (PS.color(30, 29) == COLOR_CRATE){
										PS.statusText("Press Enter to continue");
										GAME.levelCount = 3;
										if (GAME.isBeat == 0){
											PS.audioPlay("fx_tada");
											GAME.isBeat = 1;
										}
									}
								}
							}
						}
					}
				}
			}
		},

		winEasy3: function () {
			if (PS.color(1, 1) == COLOR_CRATE){
				if (PS.color(7, 1) == COLOR_CRATE){
					if (PS.color(14, 1) == COLOR_CRATE){
						if (PS.color(20, 1) == COLOR_CRATE){
							if (PS.color(26, 11) == COLOR_CRATE){
								if (PS.color(17, 16) == COLOR_CRATE){
									if (PS.color(18, 21) == COLOR_CRATE){
										if (PS.color(30, 22) == COLOR_CRATE){
											PS.statusText("Press Enter to continue");
											GAME.levelCount = 4;
											if (GAME.isBeat == 0){
												PS.audioPlay("fx_tada");
												GAME.isBeat = 1;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},

		winEasy4: function () {
			if (PS.color(28, 1) == COLOR_YELLOW_CRATE){
				if (PS.color(6, 6) == COLOR_YELLOW_CRATE){
					if (PS.color(25, 11) == COLOR_YELLOW_CRATE){
						if (PS.color(6, 9) == COLOR_BLUE_CRATE){
							if (PS.color(4, 24) == COLOR_BLUE_CRATE){
								if (PS.color(14, 25) == COLOR_BLUE_CRATE){
									if (PS.color(14, 14) == COLOR_PURPLE_CRATE){
										if (PS.color(17, 18) == COLOR_PURPLE_CRATE){
											PS.statusText("You've won! Are you ready for a challenge?");
											if (GAME.isBeat == 0){
												PS.audioPlay("fx_tada");
												GAME.isBeat = 1;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},

		winHard1: function () {
			if (PS.color(4, 1) != COLOR_GOAL) {
				if (PS.color(30, 1) != COLOR_GOAL) {
					if (PS.color(16, 4) != COLOR_GOAL) {
						if (PS.color(1, 6) != COLOR_GOAL) {
							if (PS.color(19, 13) != COLOR_GOAL) {
								if (PS.color(8, 21) != COLOR_GOAL) {
									if (PS.color(8, 25) != COLOR_GOAL) {
										PS.statusText("Press Enter to continue!");
										GAME.levelCount = 6;
										if (GAME.isBeat == 0){
											PS.audioPlay("fx_tada");
											GAME.isBeat = 1;
										}
									}
								}
							}
						}
					}
				}
			}
		},

		winHard2: function () {
			if (PS.color(1, 1) == COLOR_BLUE_CRATE) {
				if (PS.color(1, 21) == COLOR_BLUE_CRATE) {
					if (PS.color(25, 30) == COLOR_BLUE_CRATE) {
						if (PS.color(16, 11) == COLOR_PURPLE_CRATE) {
							if (PS.color(30, 18) == COLOR_PURPLE_CRATE) {
								if (PS.color(29, 30) == COLOR_PURPLE_CRATE) {
									if (PS.color(5, 21) == COLOR_YELLOW_CRATE) {
										if (PS.color(1, 24) == COLOR_YELLOW_CRATE) {
											if (PS.color(19, 30) == COLOR_YELLOW_CRATE) {
												PS.statusText("Press Enter to continue!");
												GAME.levelCount = 7;
												if (GAME.isBeat == 0){
													PS.audioPlay("fx_tada");
													GAME.isBeat = 1;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},

		winHard3: function () {
			if (PS.color(21, 30) == COLOR_BLUE_CRATE) {
				if (PS.color(22, 10) == COLOR_BLUE_CRATE) {
					if (PS.color(2, 19) == COLOR_BLUE_CRATE) {
						if (PS.color(1, 3) == COLOR_PURPLE_CRATE) {
							if (PS.color(30, 1) == COLOR_PURPLE_CRATE) {
								if (PS.color(22, 19) == COLOR_PURPLE_CRATE) {
									if (PS.color(1, 9) == COLOR_YELLOW_CRATE) {
										if (PS.color(18, 19) == COLOR_YELLOW_CRATE) {
											if (PS.color(4, 30) == COLOR_YELLOW_CRATE) {
												PS.statusText("Press Enter to continue!");
												GAME.levelCount = 8;
												if (GAME.isBeat == 0){
													PS.audioPlay("fx_tada");
													GAME.isBeat = 1;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},

		winHard4: function () {
			if (PS.color(20, 1) == COLOR_PURPLE_CRATE){
				if (PS.color(24, 1) == COLOR_YELLOW_CRATE){
					if (PS.color(29, 1) == COLOR_YELLOW_CRATE){
						if (PS.color(1, 12) == COLOR_PURPLE_CRATE){
							if (PS.color(25, 14) == COLOR_YELLOW_CRATE){
								if (PS.color(10, 30) == COLOR_BLUE_CRATE){
									if (PS.color(29, 30) == COLOR_BLUE_CRATE){
										PS.statusText("Press Enter to continue!");
										GAME.isBeat = 1;
										if (GAME.isBeat == 0){
											PS.audioPlay("fx_tada");
											GAME.isBeat = 1;
										}
									}
								}
							}
						}
					}
				}
			}

		},

		colorCount: function () {
			if (PS.color(8, 25) == COLOR_RED_BOX){
				GAME.colorCounter = 2;
				//PS.audioPlay("fx_powerup7");
				if (PS.color(5, 19) == COLOR_ORANGE_BOX){
					GAME.colorCounter = 3;
					//PS.audioPlay("fx_powerup7");
					if (PS.color(30, 30) == COLOR_YELLOW_BOX){
						GAME.colorCounter = 4;
						//PS.audioPlay("fx_powerup7");
						if (PS.color(30, 23) == COLOR_GREEN_BOX){
							GAME.colorCounter = 5;
							//PS.audioPlay("fx_powerup7");
							if (PS.color(22, 16) == COLOR_BLUE_BOX){
								GAME.colorCounter = 6;
								//PS.audioPlay("fx_powerup7");
								if (PS.color(24, 2) == COLOR_INDIGO_BOX){
									GAME.colorCounter = 7;
									//PS.audioPlay("fx_powerup7");
									if (PS.color(30, 19) == COLOR_VIOLET_BOX){
										GAME.colorCounter = 8;
										//PS.audioPlay("fx_powerup7");
										if (PS.color(26, 19) == COLOR_WHITE_BOX){
											if (GAME.isBeat == 0){
												PS.audioPlay("fx_tada");
												GAME.isBeat = 1;
											}
											PS.statusText("Hooray! You're good at pushing boxes!");
											GAME.levelCount = 1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};

	// Return the 'exports' object as the value
	// of this function, thereby assigning it
	// to the global GAME variable. This makes
	// its properties visible to Perlenspiel.

	return exports;
} () );

PS.init = function( system, options ) {
	"use strict"; // Do not remove this directive!

	GAME.initStart();

};

PS.keyDown = function( key, shift, ctrl, options ) {
	"use strict"; // Do not remove this directive!
	switch ( key ) {
		case PS.KEY_ARROW_UP:
		case 119:
		case 87: {
			GAME.move(0, -1); // move UP (v = -1)
			break;
		}
		case PS.KEY_ARROW_DOWN:
		case 115:
		case 83: {
			GAME.move(0, 1); // move DOWN (v = 1)
			break;
		}
		case PS.KEY_ARROW_LEFT:
		case 97:
		case 65: {
			GAME.move(-1, 0); // move LEFT (h = -1)
			break;
		}
		case PS.KEY_ARROW_RIGHT:
		case 100:
		case 68: {
			GAME.move(1, 0); // move RIGHT (h = 1)
			break;
		}
		case 13: { // enter
			if (GAME.isBeat == 0) { // if a level has not been beaten
				if (GAME.levelCount == 0) { // if they are on the start level
					GAME.initEasy1();// load up the easy 1st level
				} else if (GAME.levelCount == 5) {
					GAME.initHard1();
				}
			}else if (GAME.isBeat == 1) {
					if (GAME.levelCount == 2) {
						GAME.initEasy2();
					} else if (GAME.levelCount == 3) {
						GAME.initEasy3();
					} else if (GAME.levelCount == 4) {
						GAME.initEasy4();
					} if (GAME.levelCount == 6){
					GAME.initHard2();
				} else if (GAME.levelCount == 7){
						GAME.initHard3();
				} else if (GAME.levelCount == 8){
						GAME.initHard4();
				} else if (GAME.levelCount == 9){
						GAME.initHard5();
				}
			}
		break;
	}

		case 32: { // spacebar
			if (GAME.isBeat == 0){
				if (GAME.levelCount == 1){
					GAME.restartEasy1();
				} else if (GAME.levelCount == 2){
					GAME.restartEasy2();
				} else if (GAME.levelCount == 3){
					GAME.restartEasy3();
				} else if (GAME.levelCount == 4){
					GAME.restartEasy4();
				} else if (GAME.levelCount == 5) {
					GAME.restartHard1();
				} else if (GAME.levelCount == 6){
					GAME.restartHard2();
				} else if (GAME.levelCount == 7){
					GAME.restartHard3();
				} else if (GAME.levelCount == 8){
					GAME.restartHard4();
				} else if (GAME.levelCount == 9){
					GAME.restartHard5();
				}
			}
			break;
		}

		case PS.KEY_TAB: {
			if (GAME.isHard == 0) {
				if (GAME.levelCount == 1) {
					GAME.initEasy2();
					GAME.levelCount = 2;
				} else if (GAME.levelCount == 2){
					GAME.initEasy3();
					GAME.levelCount = 3;
				} else if (GAME.levelCount == 3){
					GAME.initEasy4();
					GAME.levelCount = 4;
				}
			} else if (GAME.isHard == 1){
				if (GAME.levelCount == 5){
					GAME.initHard2();
					GAME.levelCount = 6;
				} else if (GAME.levelCount == 6){
					GAME.initHard3();
					GAME.levelCount = 7;
				} else if (GAME.levelCount == 7){
					GAME.initHard4();
					GAME.levelCount = 8;
				} else if (GAME.levelCount == 8){
					GAME.initHard5();
					GAME.levelCount = 9;
				}
			}
		}
	}
};